heat_template_version: 2015-04-30

description: >
  HOT template to create a LoadbalancerPool:

parameters:
  name:
    type: string
    description: name for the LoadbalancerPool
    # required: optional
  fq_name:
    type: string
    description: fq_name for the LoadbalancerPool
    # required: optional
  display_name:
    type: string
    description: Display name user configured string(name) that can be updated any time. Used as openstack name.
    # operations: CRUD
    # required: optional
  loadbalancer_pool_provider:
    type: string
    description: Provider field selects backend provider of the LBaaS, Cloudadmin could offere different levels of
    # operations: CR
    # required: optional
  loadbalancer_pool_properties_admin_state:
    type: boolean
    description: Administrative up or down
    # operations: CRUD
    # required: optional
  loadbalancer_pool_properties_protocol:
    type: string
    description: IP protocol string like http, https or tcp.
    # operations: CRUD
    # required: required
  loadbalancer_pool_properties_loadbalancer_method:
    type: string
    description: Load balancing method ROUND_ROBIN, LEAST_CONNECTIONS, or SOURCE_IP
    # operations: CRUD
    # required: optional
  loadbalancer_pool_properties_subnet_id:
    type: string
    description: UUID of the subnet from where the members of the pool are reachable.
    # operations: CRUD
    # required: required
  loadbalancer_pool_properties_session_persistence:
    type: string
    description: Method for persistence. HTTP_COOKIE, SOURCE_IP or APP_COOKIE.
    # operations: CRUD
    # required: optional
  loadbalancer_pool_properties_persistence_cookie_name:
    type: string
    description: To Be Added
    # operations: CRUD
    # required: optional
  loadbalancer_pool_custom_attributes_key_value_pair_key:
    type: string
    description: key for the LoadbalancerPool
    # operations: CRUD
    # required: optional
  loadbalancer_pool_custom_attributes_key_value_pair_value:
    type: string
    description: value for the LoadbalancerPool
    # operations: CRUD
    # required: optional
  project:
    type: string
    description: project for the LoadbalancerPool
    # required: optional

resources:
  GlobalSystemConfig:
    type: OS::ContrailV2::GlobalSystemConfig

  ServiceInstance:
    type: OS::ContrailV2::ServiceInstance
    properties:
      project: { get_param: project }

  ServiceApplianceSet:
    type: OS::ContrailV2::ServiceApplianceSet
    properties:
      global_system_config: { get_resource: GlobalSystemConfig }

  VirtualNetwork:
    type: OS::ContrailV2::VirtualNetwork
    properties:
      project: { get_param: project }

  VirtualMachineInterface:
    type: OS::ContrailV2::VirtualMachineInterface
    properties:
      virtual_network_refs: [{ get_resource: VirtualNetwork }]
      project: { get_param: project }

  Loadbalancer:
    type: OS::ContrailV2::Loadbalancer
    properties:
      name: Something
      project: { get_param: project }

  LoadbalancerListener:
    type: OS::ContrailV2::LoadbalancerListener
    properties:
      name: Something
      loadbalancer_refs: [{ get_resource: Loadbalancer }]
      project: { get_param: project }

  LoadbalancerHealthmonitor:
    type: OS::ContrailV2::LoadbalancerHealthmonitor
    properties:
      name: Something
      project: { get_param: project }

  template_LoadbalancerPool:
    type: OS::ContrailV2::LoadbalancerPool
    properties:
      name: { get_param: name }
      fq_name: { get_param: fq_name }
      display_name: { get_param: display_name }
      loadbalancer_pool_provider: { get_param: loadbalancer_pool_provider }
      loadbalancer_pool_properties:
        {
          loadbalancer_pool_properties_admin_state: { get_param: loadbalancer_pool_properties_admin_state },
          loadbalancer_pool_properties_protocol: { get_param: loadbalancer_pool_properties_protocol },
          loadbalancer_pool_properties_loadbalancer_method: { get_param: loadbalancer_pool_properties_loadbalancer_method },
          loadbalancer_pool_properties_subnet_id: { get_param: loadbalancer_pool_properties_subnet_id },
          loadbalancer_pool_properties_session_persistence: { get_param: loadbalancer_pool_properties_session_persistence },
          loadbalancer_pool_properties_persistence_cookie_name: { get_param: loadbalancer_pool_properties_persistence_cookie_name },
        }
      loadbalancer_pool_custom_attributes:
        {
          loadbalancer_pool_custom_attributes_key_value_pair:
            [{
              loadbalancer_pool_custom_attributes_key_value_pair_key: { get_param: loadbalancer_pool_custom_attributes_key_value_pair_key },
              loadbalancer_pool_custom_attributes_key_value_pair_value: { get_param: loadbalancer_pool_custom_attributes_key_value_pair_value },
            }],
        }
      loadbalancer_listener_refs: [{ get_resource: LoadbalancerListener }]
      loadbalancer_healthmonitor_refs: [{ get_resource: LoadbalancerHealthmonitor }]
      service_instance_refs: [{ get_resource: ServiceInstance }]
      virtual_machine_interface_refs: [{ get_resource: VirtualMachineInterface }]
      service_appliance_set_refs: [{ get_resource: ServiceApplianceSet }]
      project: { get_param: project }

