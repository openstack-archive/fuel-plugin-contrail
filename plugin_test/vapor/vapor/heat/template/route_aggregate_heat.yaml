heat_template_version: 2015-04-30

description: >
  HOT template to create a RouteAggregate:

parameters:
  name:
    type: string
    description: name for the RouteAggregate
    # required: optional
  fq_name:
    type: string
    description: fq_name for the RouteAggregate
    # required: optional
  aggregate_route_entries_route:
    type: string
    description: route for the RouteAggregate
    # operations: CRUD
    # required: optional
  display_name:
    type: string
    description: Display name user configured string(name) that can be updated any time. Used as openstack name.
    # operations: CRUD
    # required: optional
  aggregate_route_nexthop:
    type: string
    description: Next for aggregate route that will be advertised.
    # operations: CRUD
    # required: required
  service_instance_refs:
    type: string
    description: Reference to route-aggregate policy attached to (service instance, interface).
    # required: optional
  service_instance_refs_data_interface_type:
    type: string
    description: interface_type for the RouteAggregate
    # required: optional
  routing_instance_refs:
    type: string
    description: Reference to internal routing instance object automatically generated by system.
    # required: optional
  project:
    type: string
    description: project for the RouteAggregate
    # required: optional

resources:
  template_RouteAggregate:
    type: OS::ContrailV2::RouteAggregate
    properties:
      name: { get_param: name }
      fq_name: { get_param: fq_name }
      aggregate_route_entries:
        {
          aggregate_route_entries_route: [{ get_param: aggregate_route_entries_route }],
        }
      display_name: { get_param: display_name }
      aggregate_route_nexthop: { get_param: aggregate_route_nexthop }
      service_instance_refs: [{ get_param: service_instance_refs }]
      service_instance_refs_data:
        [{
          service_instance_refs_data_interface_type: { get_param: service_instance_refs_data_interface_type },
        }]
      routing_instance_refs: [{ get_param: routing_instance_refs }]
      project: { get_param: project }

